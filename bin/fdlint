#!/usr/bin/env ruby

begin # XXX: Remove this begin/rescue before distributing your app
require 'fdlint'
require 'fdlint/cli'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/fdlint` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/fdlint now"
  exit 64
end

require 'gli'
require 'fdlint'
require 'fdlint/cli'

include GLI::App

program_desc 'Code reviewer for web developing. Check your HTML/JS/CSS codes against bad smells.'

version Fdlint::VERSION

desc 'Print debug logs'
switch [:d, :debug], negatable: false

desc 'Set the directory where rules are loaded from'
flag 'rule-dir'

desc "review codes"
arg_name 'path'
command [:review, :check] do |c|

  %w(css js html).each do |type|
    c.desc "check #{type} files only" 
    c.switch type.intern, negatable: false
  end

  c.desc "output format. Can be 'vim', 'console' or 'nocolor'."
  c.default_value :console
  c.flag :format, must_match: %w[console nocolor vim]

  c.desc "check minified files too"
  c.default_value false
  c.switch [:m, :"checkmin"]

  c.desc "shortcut for '--format=list'"
  c.switch [:l, :list], negatable: false

  c.desc "the log level for filter results"
  c.default_value 'warn'
  c.flag [:loglevel], must_match: %s[warn error faltal]

  c.desc 'Print debug logs'
  c.switch [:d, :debug], negatable: false

  c.action do |global, opt, args|

    if args.empty?
      if $stdin.tty?
        help_now! 'files required'
      else
        source = ARGF.read
      end
    end

    options = {

      :log_level => opt[:loglevel].intern,
      :format    => opt[:list] ? :nocolor : opt[:format],
      :encoding  => opt[:encoding],
      :syntax    => opt[:css]  ? :css :
                    opt[:js]   ? :js  :
                    opt[:html] ? :html : nil,
      :debug     => opt[:debug] || global[:debug],
      :rule_dir  => global[:'rule-dir'],
      :files     => args,
      :text      => source,
      :checkmin  => opt[:m]
    }

    exit_now!(Fdlint::CLI.run(options) ? 0 : 1)
  end
end

desc 'list imported rules'
command 'rule' do |c|
  c.action do |global, opt, args|
    Fdlint::CLI.list_rules debug: global[:debug], rule_path: global['rule-dir']
  end
end

desc 'add git hook (svn hook is not supported yet)'
command 'hook' do |c|

  c.command 'add' do |c|
    c.action do
      puts 'add git hook'
    end
  end

  c.command 'rm' do |c|
    c.action do
      puts 'remove git hook'
    end
  end
end

on_error do |err|
  next if GLI::CustomExit === err
  if defined? Bundler
    puts err.message
    puts err.backtrace.join( "\n" )
  end
end

exit run(ARGV)
